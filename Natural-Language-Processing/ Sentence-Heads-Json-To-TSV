import json
import csv
import os
import pandas as pd
import random

def get_target_path(input_path, is_random_heads):
    target_path = ''
    if is_random_heads:
        target_path = os.path.splitext(input_path)[0] + '_heads.tsv'
    else:
        target_path = os.path.splitext(input_path)[0] + '_rnd_heads.tsv'
    return target_path

#   is_random_heads: should we use the heads from the json file or generate random ones?
def source_head_target(json_path, tsv_path, is_random_heads):
    target = get_target_path(tsv_path, is_random_heads)
    with open(target, 'w', encoding='utf-8') as fd:
        df = pd.read_csv(tsv_path, sep = '\t', header = None)
        with open(json_path, 'r') as j:
            json_data = [json.loads(line) for line in j]
            for i in range(len(json_data)):
                source_and_heads=[]
                sentence_len = len(json_data[i]['predicted_heads'])
                if is_random_heads:
                    rnd_indices = random.sample(range(sentence_len),sentence_len)
                for j in range(sentence_len):
                    if is_random_heads:
                        head_index = rnd_indices[j]
                    else:
                        head_index = json_data[i]['predicted_heads'][j]

                    if head_index > 0 :
                        head_word = json_data[i]['words'][head_index-1]
                    else:
                        head_word = '@@ROOT@@'
                    source_and_heads.append(json_data[i]['words'][j])
                    source_and_heads.append(head_word)
                df.loc[i][0] = ' '.join(source_and_heads)
                output = df.loc[i][0] + '\t' + df.loc[i][1] +'\n'
                fd.write(output)

def check_parity(file_path):
    with open('train_heads.tsv', encoding='utf-8') as tsvfile:
        tsvreader = csv.reader(tsvfile, delimiter = '\t')
        for line in tsvreader:
            if(len(line[:1][0].split())%2!=0):
                print(line[:-1][0])
                raise AssertionError
    print('success!')


json_train = 'pred_train.json'
tsv_train = 'train.tsv'
json_dev = 'pred_dev.json'
tsv_dev = 'dev.tsv'

source_head_target(json_train, tsv_train, False)
source_head_target(json_dev, tsv_dev, False)

check_parity('dev_heads.tsv')
check_parity('train_heads.tsv')

source_head_target(json_train, tsv_train, True)
source_head_target(json_dev, tsv_dev, True)

check_parity('dev_rnd_heads.tsv')
check_parity('train_rnd_heads.tsv')
